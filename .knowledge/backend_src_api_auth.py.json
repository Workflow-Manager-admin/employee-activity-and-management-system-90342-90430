{"is_source_file": true, "format": "Python", "description": "This file defines authentication and authorization utilities for an employee management system, including JWT token creation and verification, role-based access control dependencies, and permission checks.", "external_files": ["./models", "./storage"], "external_methods": ["storage.get_employee"], "published": ["create_access_token", "verify_token", "get_current_user", "require_role", "get_admin_user", "get_manager_or_admin_user", "get_any_user", "can_access_employee_data", "can_approve_leave"], "classes": [], "methods": [{"name": "create_access_token(data: dict, expires_delta: Optional[timedelta] = None)", "description": "Creates a JWT token with optional expiration.", "scope": "", "scopeKind": ""}, {"name": "Optional[dict] verify_token(token: str)", "description": "Decodes and verifies a JWT token, returning payload or None if invalid.", "scope": "", "scopeKind": ""}, {"name": "Employee get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security))", "description": "Retrieves the current authenticated Employee based on JWT token in the request.", "scope": "", "scopeKind": ""}, {"name": "require_role(required_roles: list[Role])", "description": "Dependency factory to enforce role-based access control.", "scope": "", "scopeKind": ""}, {"name": "get_admin_user(current_user: Employee = Depends(require_role([Role.ADMIN])))", "description": "Dependency to get current user with admin role.", "scope": "", "scopeKind": ""}, {"name": "get_manager_or_admin_user(current_user: Employee = Depends(require_role([Role.MANAGER, Role.ADMIN])))", "description": "Dependency to get current user with manager or admin role.", "scope": "", "scopeKind": ""}, {"name": "get_any_user(current_user: Employee = Depends(get_current_user))", "description": "Dependency to get the current user regardless of role.", "scope": "", "scopeKind": ""}, {"name": "bool can_access_employee_data(current_user: Employee, target_employee_id: str)", "description": "Checks if current user can access a specific employee's data based on role and hierarchy.", "scope": "", "scopeKind": ""}, {"name": "bool can_approve_leave(current_user: Employee, leave_request)", "description": "Determines if current user can approve a given leave request.", "scope": "", "scopeKind": ""}, {"name": "role_checker(current_user: Employee = Depends(get_current_user))", "scope": "require_role", "scopeKind": "function", "description": "unavailable"}], "calls": ["jwt.encode", "jwt.decode", "storage.get_employee"], "search-terms": ["JWT authentication", "role-based access", "employee management", "authorization dependencies", "FastAPI security"], "state": 2, "file_id": 8, "knowledge_revision": 43, "git_revision": "", "revision_history": [{"17": ""}, {"42": ""}, {"43": ""}], "ctags": [{"_type": "tag", "name": "ACCESS_TOKEN_EXPIRE_MINUTES", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^ACCESS_TOKEN_EXPIRE_MINUTES = 30$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "ALGORITHM", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^ALGORITHM = \"HS256\"$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "SECRET_KEY", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^SECRET_KEY = \"your-secret-key-change-in-production\"  # Should be in environment variables$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "can_access_employee_data", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def can_access_employee_data(current_user: Employee, target_employee_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(current_user: Employee, target_employee_id: str)"}, {"_type": "tag", "name": "can_approve_leave", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def can_approve_leave(current_user: Employee, leave_request) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(current_user: Employee, leave_request)"}, {"_type": "tag", "name": "create_access_token", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):$/", "language": "Python", "kind": "function", "signature": "(data: dict, expires_delta: Optional[timedelta] = None)"}, {"_type": "tag", "name": "get_admin_user", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def get_admin_user(current_user: Employee = Depends(require_role([Role.ADMIN]))):$/", "language": "Python", "kind": "function", "signature": "(current_user: Employee = Depends(require_role([Role.ADMIN])))"}, {"_type": "tag", "name": "get_any_user", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def get_any_user(current_user: Employee = Depends(get_current_user)):$/", "language": "Python", "kind": "function", "signature": "(current_user: Employee = Depends(get_current_user))"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> Emp/", "language": "Python", "typeref": "typename:Employee", "kind": "function", "signature": "(credentials: HTTPAuthorizationCredentials = Depends(security))"}, {"_type": "tag", "name": "get_manager_or_admin_user", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def get_manager_or_admin_user(current_user: Employee = Depends(require_role([Role.MANAGER, Role./", "language": "Python", "kind": "function", "signature": "(current_user: Employee = Depends(require_role([Role.MANAGER, Role.ADMIN])))"}, {"_type": "tag", "name": "require_role", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def require_role(required_roles: list[Role]):$/", "language": "Python", "kind": "function", "signature": "(required_roles: list[Role])"}, {"_type": "tag", "name": "role_checker", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^    def role_checker(current_user: Employee = Depends(get_current_user)):$/", "file": true, "language": "Python", "kind": "function", "signature": "(current_user: Employee = Depends(get_current_user))", "scope": "require_role", "scopeKind": "function"}, {"_type": "tag", "name": "security", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^security = HTTPBearer()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "verify_token", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/auth.py", "pattern": "/^def verify_token(token: str) -> Optional[dict]:$/", "language": "Python", "typeref": "typename:Optional[dict]", "kind": "function", "signature": "(token: str)"}], "hash": "f8c152dd2ab841fd0cce2271ce4f98b9", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/auth.py", "fields": [{"name": "ACCESS_TOKEN_EXPIRE_MINUTES = 30", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ALGORITHM = \"HS256\"", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "SECRET_KEY = \"your-secret-key-change-in-production\"  # Should be in environment variables", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "security = HTTPBearer()", "scope": "", "scopeKind": "", "description": "unavailable"}]}