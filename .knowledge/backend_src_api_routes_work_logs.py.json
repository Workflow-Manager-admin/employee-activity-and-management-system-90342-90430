{"is_source_file": true, "format": "Python (FastAPI)", "description": "This source file defines REST API routes for managing work logs within an employee activity management system. It includes endpoints for creating, retrieving, updating, and adding feedback to work logs, as well as generating work summaries. The file utilizes FastAPI's routing and dependency injection, interacts with storage and authentication modules, and implements permission checks and audit logging.", "external_files": ["../models", "../storage", "../auth"], "external_methods": ["storage.get_settings", "storage.create_work_log", "storage.create_audit_entry", "storage.get_work_logs_by_employee", "storage.get_work_log", "storage.update_work_log", "storage.get_employee", "can_access_employee_data", "get_current_user"], "published": ["create_work_log", "get_work_logs", "get_work_log", "update_work_log", "add_feedback_to_log", "get_work_summary"], "classes": [], "methods": [{"name": "bool can_edit_work_log(work_log: WorkLog, current_user: Employee)", "description": "Checks if the current user has permission to edit a given work log based on role, ownership, and time constraints.", "scope": "", "scopeKind": ""}, {"name": "add_feedback_to_log( log_id: str, feedback_text: str, rating: Optional[int] = None, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "create_work_log( log_data: WorkLogCreate, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_log( log_id: str, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_logs( employee_id: Optional[str] = Query(None, description=\"Filter by employee ID\"), start_date: Optional[date] = Query(None, description=\"Start date filter\"), end_date: Optional[date] = Query(None, description=\"End date filter\"), current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_summary( employee_id: Optional[str] = Query(None), start_date: Optional[date] = Query(None), end_date: Optional[date] = Query(None), current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "update_work_log( log_id: str, log_update: WorkLogUpdate, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["storage.create_work_log", "storage.create_audit_entry", "storage.get_work_logs_by_employee", "storage.get_work_log", "storage.update_work_log", "storage.get_employee", "can_access_employee_data", "get_current_user"], "search-terms": ["work_logs API", "FastAPI employee work log routes", "create_update_delete work log", "feedback work log", "work summary endpoint", "authorization work logs", "audit trail work logs"], "state": 2, "file_id": 10, "knowledge_revision": 21, "git_revision": "", "ctags": [{"_type": "tag", "name": "add_feedback_to_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def add_feedback_to_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, feedback_text: str, rating: Optional[int] = None, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "can_edit_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^def can_edit_work_log(work_log: WorkLog, current_user: Employee) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(work_log: WorkLog, current_user: Employee)"}, {"_type": "tag", "name": "create_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def create_work_log($/", "language": "Python", "kind": "function", "signature": "( log_data: WorkLogCreate, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_logs", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_logs($/", "language": "Python", "kind": "function", "signature": "( employee_id: Optional[str] = Query(None, description=\"Filter by employee ID\"), start_date: Optional[date] = Query(None, description=\"Start date filter\"), end_date: Optional[date] = Query(None, description=\"End date filter\"), current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_summary", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_summary($/", "language": "Python", "kind": "function", "signature": "( employee_id: Optional[str] = Query(None), start_date: Optional[date] = Query(None), end_date: Optional[date] = Query(None), current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^router = APIRouter(prefix=\"\\/work-logs\", tags=[\"work-logs\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def update_work_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, log_update: WorkLogUpdate, current_user: Employee = Depends(get_current_user) )"}], "hash": "a04a47c946fa03477e9e0bbaaabf19ef", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/routes/work_logs.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/work-logs\", tags=[\"work-logs\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"21": ""}]}