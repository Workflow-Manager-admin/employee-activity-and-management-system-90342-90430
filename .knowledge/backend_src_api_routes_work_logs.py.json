{"is_source_file": true, "format": "Python", "description": "This file defines API routes for managing work logs within an employee activity management system using FastAPI. It includes endpoints for creating, retrieving, updating, and adding feedback to work logs, as well as generating summary reports. The code relies on external modules for data storage, authentication, and data models.", "external_files": ["../models", "../storage", "../auth"], "external_methods": ["storage.get_settings", "storage.create_work_log", "storage.create_audit_entry", "storage.get_work_logs_by_employee", "storage.get_work_log", "storage.update_work_log", "storage.get_employee", "can_access_employee_data", "get_current_user"], "published": ["create_work_log", "get_work_logs", "get_work_log", "update_work_log", "add_feedback_to_log", "get_work_summary"], "classes": [], "methods": [{"name": "bool can_edit_work_log(work_log: WorkLog, current_user: Employee)", "description": "Determines if a user can edit a specific work log based on role, ownership, and time constraints.", "scope": "", "scopeKind": ""}, {"name": "add_feedback_to_log( log_id: str, feedback_text: str, rating: Optional[int] = None, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "create_work_log( log_data: WorkLogCreate, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_log( log_id: str, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_logs( employee_id: Optional[str] = Query(None, description=\"Filter by employee ID\"), start_date: Optional[date] = Query(None, description=\"Start date filter\"), end_date: Optional[date] = Query(None, description=\"End date filter\"), current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "get_work_summary( employee_id: Optional[str] = Query(None), start_date: Optional[date] = Query(None), end_date: Optional[date] = Query(None), current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "update_work_log( log_id: str, log_update: WorkLogUpdate, current_user: Employee = Depends(get_current_user) )", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["storage.create_work_log", "storage.create_audit_entry", "storage.get_work_logs_by_employee", "storage.get_work_log", "storage.update_work_log", "storage.get_employee", "storage.create_audit_entry"], "search-terms": ["FastAPI work log endpoints", "employee activity API", "work log CRUD", "feedback system", "work log summary", "authorization checks", "audit trail"], "state": 2, "file_id": 10, "knowledge_revision": 52, "git_revision": "e4a6b3552a677d42c09fb03f4577c207fe3e7a81", "revision_history": [{"21": ""}, {"52": "e4a6b3552a677d42c09fb03f4577c207fe3e7a81"}], "ctags": [{"_type": "tag", "name": "add_feedback_to_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def add_feedback_to_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, feedback_text: str, rating: Optional[int] = None, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "can_edit_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^def can_edit_work_log(work_log: WorkLog, current_user: Employee) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(work_log: WorkLog, current_user: Employee)"}, {"_type": "tag", "name": "create_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def create_work_log($/", "language": "Python", "kind": "function", "signature": "( log_data: WorkLogCreate, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_logs", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_logs($/", "language": "Python", "kind": "function", "signature": "( employee_id: Optional[str] = Query(None, description=\"Filter by employee ID\"), start_date: Optional[date] = Query(None, description=\"Start date filter\"), end_date: Optional[date] = Query(None, description=\"End date filter\"), current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "get_work_summary", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def get_work_summary($/", "language": "Python", "kind": "function", "signature": "( employee_id: Optional[str] = Query(None), start_date: Optional[date] = Query(None), end_date: Optional[date] = Query(None), current_user: Employee = Depends(get_current_user) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^router = APIRouter(prefix=\"\\/work-logs\", tags=[\"work-logs\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_work_log", "path": "/home/kavia/workspace/code-generation/employee-activity-and-management-system-90342-90430/backend/src/api/routes/work_logs.py", "pattern": "/^async def update_work_log($/", "language": "Python", "kind": "function", "signature": "( log_id: str, log_update: WorkLogUpdate, current_user: Employee = Depends(get_current_user) )"}], "hash": "51242267b965d69176513cb37f05d747", "format-version": 4, "code-base-name": "backend", "filename": "backend/src/api/routes/work_logs.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/work-logs\", tags=[\"work-logs\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}